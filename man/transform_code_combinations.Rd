% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transform_code_combinations.R
\name{transform_code_combinations}
\alias{transform_code_combinations}
\title{Transform combinations of code values into new values}
\usage{
transform_code_combinations(
  data,
  from_values,
  to_values,
  impute_when_missing_from = NULL
)
}
\arguments{
\item{data}{[\code{data.frame}]\cr
Data with code values that should be transformed.}

\item{from_values}{[\code{list}]\cr
List with named vector(s) of code values that should transformed, see details and examples.}

\item{to_values}{[\code{list}]\cr
List with named vector(s) of code values that should be the results of the transformation,
see details and examples.}

\item{impute_when_missing_from}{[\code{character}]\cr
Column names for the code variables from which code values should be copied if no
transformation is performed. Defaults to the original column names.}
}
\value{
A \code{data.frame}.
}
\description{
Transforms combinations of code values into new values in a data
frame. This is intended for use when only a few code value combinations
should be changed and one will avoid building translation tables or code
with several if, which or case_when statements. In particularly it was
inspired by the need of changing a few code combinations in PJS data when
reporting surveillance programmes.
}
\details{
The function builds a transformation table based on the input. The
\code{from_values} and the \code{to_values} give the data to a transformation table,
and the \code{from_columns} and the \code{to_columns} give the column names for the
transformation table.

The \code{from_values} is a list of one or more vectors. Each vector is named with
the column name and represents one column variable with code values. The
first entry in each vector constitute one code combination to be
transformed, the second entry constitutes the next code combinations.

Likewise, is the \code{to_values} a list of one or more named vectors. Each
vector is named and represents one column variable with
code values to which the code combinations in the \code{from_values} should be
transformed. The name of the vector is the name of the columns with the
transformed values. The transformed values can be put in the original columns,
in which case the transformed combinations will replace
the original entries. If the transformed column names don't exist in data,
the columns will be added to the data.

If the codes are not transformed, these can be kept in the data.
\code{impute_when_missing_from} gives the column names of the columns from which
to impute. Normally this will be the same as the original columns. However,
if the number of transformed columns is less than the original columns, it
will be necessary to give the columns from which to keep the code.
}
\examples{
library(NVIdb)

#  A code combination of two is tranformed to another code combination of two
  data <- as.data.frame(cbind(
c("Detected", "Detected", "Not detected", NA),
                              c("M. bovis", "M. kansasii", "M. bovis", NA)
))
  colnames(data) <- c("kjennelse", "analytt")

  data <- transform_code_combinations(data = data,
                                      from_values = list("kjennelse" = c("Detected"),
                                                         "analytt" = c("M. kansasii")),
                                      to_values = list("kjennelse" = c("Not detected"),
                                                       "analytt" = c("M. bovis")),
                                      impute_when_missing_from = c("kjennelse", "analytt"))

# two code values to one new variable
data <- as.data.frame(cbind(c("hjort", "rein", "elg", "hjort", NA),
                            c("produksjonsdyr", "ville dyr", "ville dyr", "ville dyr", NA)))
colnames(data) <- c("art", "driftsform")

data <- transform_code_combinations(
             data = data,
             from_values = list("art" = c("hjort", "rein", NA),
                                "driftsform" = c("produksjonsdyr", "ville dyr", NA)),
             to_values = list("art2" = c("oppdrettshjort", "villrein", "ukjent")),
             impute_when_missing_from = "art")
}
\author{
Petter Hopp Petter.Hopp@vetinst.no
}
